{"version":3,"sources":["Components/Wrapper/index.js","Components/PicsCard/index.js","Components/Score/index.js","Utils/Shuffle.js","App.jsx","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","PicsCard","alt","image","src","onClick","verifyOneClick","Score","shuffle","arr","i","j","temp","length","Math","floor","random","App","state","pics","score","highScore","handleInputChange","event","_event$target","target","name","value","preventDefault","handleIncrement","_this","id","setState","count","this","pictures","Shuffle","_this2","Components_Wrapper","Components_Score","map","picture","Components_PicsCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqEAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,wBCc1BC,MAdf,SAAmBN,GACnB,OAIMC,EAAAC,EAAAC,cAAA,OAAKI,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMQ,MAAOE,QAASV,EAAMW,wBCF7CC,MAJjB,SAAeZ,GACX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMK,WCU1BQ,MAZf,SAAiBC,GACb,IAAIC,EACAC,EACAC,EACJ,IAAKF,EAAID,EAAII,OAAS,EAAGH,EAAI,EAAGA,IAC5BC,EAAIG,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IACpCE,EAAOH,EAAIC,GACXD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAEb,OAAOH,GCyEIQ,6MA1EbC,MAAQ,CACNC,OACAC,MAAO,EACPC,UAAW,KAGbC,kBAAoB,SAAAC,GAAS,IAAAC,EAEHD,EAAME,OAFHD,EAEnBE,KAFmBF,EAEbG,SAchBrB,eAAiB,SAAAiB,GACfA,EAAMK,oBASRC,gBAAkB,WAEE,GAAfC,EAAKX,KAAKY,IACbD,EAAKE,SAAS,CAAEC,MAAOH,EAAKZ,MAAMe,MAAQ,wFAtB1CC,KAAKF,SAAS,CACZG,SAAUC,qCAyBH,IAAAC,EAAAH,KACP,OACEtC,EAAAC,EAAAC,cAACwC,EAAD,KAGE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,uDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,oDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,SACAH,EAAAC,EAAAC,cAACyC,EAAD,OAKF3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZmC,KAAKhB,MAAMC,KAAKqB,IAAI,SAAAC,GAAO,OAE1B7C,EAAAC,EAAAC,cAAC4C,EAAD,CACEC,IAAKF,EAAQE,IACbZ,GAAIU,EAAQV,GACZ5B,MAAOsC,EAAQtC,MACfG,eAAgB+B,EAAK/B,4BAhEnBsC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a38608a8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction PicsCard (props) {\r\nreturn(\r\n\r\n    \r\n      \r\n      <img alt={props.image} src={props.image} onClick={props.verifyOneClick} />\r\n      \r\n\r\n\r\n\r\n)\r\n\r\n}\r\n\r\nexport default PicsCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Score(props) {\r\n    return <div className=\"score\">{props.children}</div>;\r\n  }\r\n  \r\n  export default Score;","\r\n\r\nfunction shuffle(arr) {\r\n    var i,\r\n        j,\r\n        temp;\r\n    for (i = arr.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        temp = arr[i];\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n    return arr;    \r\n};\r\nexport default shuffle;","import React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./Components/Wrapper/index\";\nimport pics from \"./pics.json\";\nimport PicsCard from './Components/PicsCard';\nimport Score from './Components/Score'\nimport Shuffle from './Utils/Shuffle'\n\nclass App extends Component {\n\n  //Set state to pics.json\n  state = {\n    pics,\n    score: 0,\n    highScore: 0,\n\n  };\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n\n  };\n  componentDidMount() {\n    this.setState({ \n      pictures: Shuffle\n\n    \n    })\n\n  };\n\n\n  verifyOneClick = event => {\n    event.preventDefault();\n    //see if it has been clicked before\n\n    \n    //update score or end game\n    //check top score and update if need be\n    //shuffle img\n\n  }\n  handleIncrement = () => {\n    // set score if pic has not been clicked yet\n    if(this.pics.id !=true)\n    this.setState({ count: this.state.count + 1 });\n  };\n\n    \n    render() {\n      return (\n        <Wrapper>\n\n\n          <div>\n            <h1 className=\"header\">Clicky Game!!</h1>\n            <h4 className=\"header\">Click on the images to gain points, but be careful!</h4>\n            <h4 className=\"header3\"> Clicking on the same image twice ends the game!</h4>\n            <h3 className=\"score\">Score</h3>\n            <Score\n              \n            />\n          </div>\n\n          <div className='flex-container'>\n            {this.state.pics.map(picture => (\n\n              <PicsCard\n                key={picture.key}\n                id={picture.id}\n                image={picture.image}\n                verifyOneClick={this.verifyOneClick}\n              />\n\n            ))}\n\n          </div>\n\n\n        </Wrapper>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}